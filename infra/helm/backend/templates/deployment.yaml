# devops-project1/infra/helm/backend/templates/deployment.yaml
{{- $name := default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" -}}
{{- $fullname := (.Values.fullnameOverride | default (printf "%s-%s" .Release.Name $name)) | trunc 63 | trimSuffix "-" -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $fullname }}
  labels:
    app.kubernetes.io/name: {{ $name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ $name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ $name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      {{- if (default false (get (default (dict) .Values.runtime) "fixPasswd")) }}
      volumes:
        - name: etc-passwd
          emptyDir: {}
      {{- end }}

      initContainers:
        {{- if (default false (get (default (dict) .Values.runtime) "fixPasswd")) }}
        - name: fix-passwd
          image: busybox:1.36
          command: ["/bin/sh","-lc"]
          args:
            - |
              cp /etc/passwd /work/passwd
              if ! awk -F: '$$3==1000{found=1} END{exit !found}' /work/passwd ; then
                echo 'appuser:x:1000:1000:appuser:/data:/sbin/nologin' >> /work/passwd
              fi
              ls -l /work; tail -n +1 /work/passwd
          volumeMounts:
            - name: etc-passwd
              mountPath: /work
        {{- end }}
        - name: wait-for-db
          image: postgres:15
          command: ["/bin/sh","-c"]
          args:
            - |
              set -eu
              HOST="{{ .Values.db.service.name | default "db" }}.{{ .Release.Namespace }}.svc.cluster.local"
              PORT="{{ .Values.db.service.port | default 5432 }}"
              until pg_isready -h "$HOST" -p "$PORT" -U "$POSTGRES_USER" -d "$POSTGRES_DB"; do
                echo "postgres not ready yet..."; sleep 2
              done
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.db.secrets.credsName | default "db-secrets" }}
                  key: POSTGRES_USER
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.db.secrets.credsName | default "db-secrets" }}
                  key: POSTGRES_DB

      containers:
        - name: app
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: db-conn
                  key: url
            - name: PORT
              value: "{{ .Values.service.port }}"
          readinessProbe:
            httpGet:
              path: /health
              port: {{ .Values.service.port }}
            initialDelaySeconds: 5
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /health
              port: {{ .Values.service.port }}
            initialDelaySeconds: 20
            periodSeconds: 10
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            allowPrivilegeEscalation: false
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
          {{- if (default false (get (default (dict) .Values.runtime) "fixPasswd")) }}
          volumeMounts:
            - name: etc-passwd
              mountPath: /etc/passwd
              subPath: passwd
              readOnly: true
          {{- end }}
