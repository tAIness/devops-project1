# templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app
  labels: { app: mario-app }
spec:
  replicas: 1
  selector:
    matchLabels: { app: mario-app }
  template:
    metadata:
      labels: { app: mario-app }
    spec:
      initContainers:
        - name: wait-for-db
          image: postgres:15
          command: ["/bin/sh","-c"]
          args:
            - |
              set -eu
              HOST="db.mario-backend.svc.cluster.local"
              until pg_isready -h "$HOST" -p 5432 -U "$POSTGRES_USER" -d "$POSTGRES_DB"; do
                echo "postgres not ready yet..."; sleep 2
              done
          env:
            - name: POSTGRES_USER
              valueFrom:
                 secretKeyRef:
                   name: {{ .Values.db.secrets.credsName | default "db-secrets" }}
                   key: POSTGRES_USER
            - name: POSTGRES_DB
              valueFrom:
                 secretKeyRef:
                   name: {{ .Values.db.secrets.credsName | default "db-secrets" }}
                   key: POSTGRES_DB
      containers:
        - name: app
          image: "{{ .Values.image.repository }}:{{ default .Chart.AppVersion .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports: [{ name: http, containerPort: {{ .Values.service.port }} }]
          env:
            - name: DATABASE_URL
              valueFrom: { secretKeyRef: { name: db-conn, key: url } }
            - name: PORT
              value: "{{ .Values.service.port }}"
          readinessProbe:
            httpGet: { path: /health, port: {{ .Values.service.port }} }
            initialDelaySeconds: 5
            periodSeconds: 5
          livenessProbe:
            httpGet: { path: /health, port: {{ .Values.service.port }} }
            initialDelaySeconds: 20
            periodSeconds: 10
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            allowPrivilegeEscalation: false
