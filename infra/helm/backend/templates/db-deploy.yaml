{{- /* infra/helm/backend/templates/db-deploy.yaml */ -}}
{{- $db := (.Values.db | default dict) -}}
{{- if ($db.enabled | default false) }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db
  labels:
    app: mario-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mario-db
  template:
    metadata:
      labels:
        app: mario-db
    spec:
      securityContext:
        fsGroup: 999
        fsGroupChangePolicy: OnRootMismatch

      # Only fixes ownership on the mounted PVC
      initContainers:
        - name: fix-perms
          image: busybox:1.36
          securityContext:
            runAsUser: 0
          command: ["sh","-c"]
          args:
            - |
              set -eux
              mkdir -p /var/lib/postgresql/data /var/lib/postgresql/data/pgdata
              chown -R 999:999 /var/lib/postgresql/data
              chmod 700 /var/lib/postgresql/data/pgdata || true
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data

      containers:
        - name: postgres
          image: {{ $db.image | default "postgres:15" | quote }}
          env:
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          envFrom:
            - secretRef:
                name: {{ (coalesce $db.secrets.credsName "db-secrets") | quote }}
          ports:
            - containerPort: 5432
          readinessProbe:
            exec:
              command: ["sh","-lc","pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-postgres}"]
            initialDelaySeconds: 5
            periodSeconds: 5
          livenessProbe:
            exec:
              command: ["sh","-lc","pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-postgres}"]
            initialDelaySeconds: 20
            periodSeconds: 10
          securityContext:
            runAsNonRoot: true
            runAsUser: 999
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data

          # Create user/db AFTER postgres is up (works even if PVC already has data)
          lifecycle:
            postStart:
              exec:
                command:
                  - bash
                  - -lc
                  - |
                    set -euo pipefail
                    # Wait for server
                    for i in {1..60}; do
                      pg_isready -U "${POSTGRES_USER:-postgres}" -d "${POSTGRES_DB:-postgres}" && break
                      sleep 2
                    done

                    create_if_missing () {
                      local psql_u="$1"  # which role to connect as
                      # Create role if absent
                      psql -v ON_ERROR_STOP=1 -U "$psql_u" -d postgres -tAc "SELECT 1 FROM pg_roles WHERE rolname='${POSTGRES_USER}';" | grep -q 1 \
                        || psql -v ON_ERROR_STOP=1 -U "$psql_u" -d postgres -c "CREATE USER ${POSTGRES_USER} WITH PASSWORD '${POSTGRES_PASSWORD}';"
                      # Create DB if absent (owned by POSTGRES_USER)
                      psql -v ON_ERROR_STOP=1 -U "$psql_u" -d postgres -tAc "SELECT 1 FROM pg_database WHERE datname='${POSTGRES_DB}';" | grep -q 1 \
                        || psql -v ON_ERROR_STOP=1 -U "$psql_u" -d postgres -c "CREATE DATABASE ${POSTGRES_DB} OWNER ${POSTGRES_USER};"
                    }

                    # Try with 'postgres' superuser first, then with POSTGRES_USER
                    if psql -U postgres -d postgres -tAc "SELECT 1" >/dev/null 2>&1; then
                      create_if_missing postgres
                    else
                      create_if_missing "${POSTGRES_USER:-postgres}"
                    fi

      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: pg-data
{{- end }}
