{{- $db := (get .Values "db") | default (dict) -}}
{{- if ((get $db "enabled") | default false) -}}
{{- $dbSecrets := (get $db "secrets") | default (dict) -}}
{{- $credsName := (get $dbSecrets "credsName") | default "db-secrets" -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db
  labels:
    app: mario-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mario-db
  template:
    metadata:
      labels:
        app: mario-db
    spec:
      securityContext:
        fsGroup: 999
        fsGroupChangePolicy: OnRootMismatch

      initContainers:
        - name: fix-perms
          image: busybox:1.36
          securityContext:
            runAsUser: 0
          command: ["sh","-c"]
          args:
            - |
              set -eux
              mkdir -p /var/lib/postgresql/data /var/lib/postgresql/data/pgdata
              chown -R 999:999 /var/lib/postgresql/data
              chmod 700 /var/lib/postgresql/data/pgdata || true
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data

        # Option B: start a temporary Postgres to ensure role+DB exist
        - name: ensure-db
          image: {{ (get $db "image") | default "postgres:15" | quote }}
          securityContext:
            runAsNonRoot: true
            runAsUser: 999
          env:
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
            # bootstrap defaults (main container will use the Secret)
            - name: POSTGRES_DB
              value: mario
            - name: POSTGRES_USER
              value: mario
            - name: POSTGRES_PASSWORD
              value: mario123
          command: ["sh","-lc"]
          args:
            - |
              set -euo pipefail
              PORT=5433
              echo "[ensure-db] PGDATA=${PGDATA}"
              mkdir -p /var/run/postgresql

              echo "[ensure-db] starting temporary postgres on ${PORT}..."
              pg_ctl -D "${PGDATA}" -o "-c listen_addresses='' -p ${PORT}" -w start

              echo "[ensure-db] connection sanity..."
              psql -p "${PORT}" -d postgres -v ON_ERROR_STOP=1 -c "SELECT 1;"

              echo "[ensure-db] ensure role ${POSTGRES_USER}..."
              psql -p "${PORT}" -d postgres -v ON_ERROR_STOP=1 \
                -c "DO $$ BEGIN
                       IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = '${POSTGRES_USER}') THEN
                         EXECUTE format('CREATE ROLE %I LOGIN PASSWORD %L', '${POSTGRES_USER}', '${POSTGRES_PASSWORD}');
                       END IF;
                     END $$;"

              echo "[ensure-db] ensure database ${POSTGRES_DB}..."
              psql -p "${PORT}" -d postgres -v ON_ERROR_STOP=1 \
                -c "DO $$ BEGIN
                       IF NOT EXISTS (SELECT 1 FROM pg_database WHERE datname='${POSTGRES_DB}') THEN
                         EXECUTE format('CREATE DATABASE %I OWNER %I', '${POSTGRES_DB}', '${POSTGRES_USER}');
                       END IF;
                     END $$;"

              echo "[ensure-db] stopping temporary postgres..."
              pg_ctl -D "${PGDATA}" -m fast -w stop
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data

      containers:
        - name: postgres
          image: {{ (get $db "image") | default "postgres:15" | quote }}
          env:
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          envFrom:
            - secretRef:
                name: {{ $credsName }}
          ports:
            - containerPort: 5432
          readinessProbe:
            exec:
              command: ["sh","-lc","pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
            initialDelaySeconds: 5
            periodSeconds: 5
          livenessProbe:
            exec:
              command: ["sh","-lc","pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
            initialDelaySeconds: 20
            periodSeconds: 10
          securityContext:
            runAsNonRoot: true
            runAsUser: 999
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data

      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: pg-data
{{- end }}
