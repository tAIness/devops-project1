# devops-project1/infra/helm/backend/templates/db-deploy.yaml
{{- $db := (get .Values "db") | default (dict) -}}
{{- if (get $db "enabled" | default false) }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db
  labels:
    app: mario-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mario-db
  template:
    metadata:
      labels:
        app: mario-db
    spec:
      securityContext:
        fsGroup: 999
        fsGroupChangePolicy: OnRootMismatch

      initContainers:
        # 1) Ensure volume permissions are correct
        - name: fix-perms
          image: busybox:1.36
          securityContext:
            runAsUser: 0
          command: ["sh","-c"]
          args:
            - |
              set -eu
              mkdir -p /var/lib/postgresql/data /var/lib/postgresql/data/pgdata
              chown -R 999:999 /var/lib/postgresql/data
              chmod 700 /var/lib/postgresql/data/pgdata || true
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data

        # 2) Start a temporary local postgres on the mounted PGDATA,
        #    create role & DB if missing, then stop it.
        - name: ensure-db
          image: {{ .Values.db.image | default "postgres:15" | quote }}
          securityContext:
            runAsUser: 999
            runAsNonRoot: true
          env:
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
            # Defaults in case Secret is absent (won't overwrite Secret values)
            - name: POSTGRES_DB
              value: "mario"
            - name: POSTGRES_USER
              value: "mario"
            - name: POSTGRES_PASSWORD
              value: "mario123"
          envFrom:
            - secretRef:
                name: {{ default "db-secrets" .Values.db.secrets.credsName | quote }}
                optional: true
          command: ["bash","-lc"]
          args:
            - |
              set -euo pipefail
              ROLE="${POSTGRES_USER:-mario}"
              PASS="${POSTGRES_PASSWORD:-mario123}"
              DBNM="${POSTGRES_DB:-mario}"
              SOCKDIR="/var/run/postgresql"
              PORT="5433"

              echo "[ensure-db] PGDATA=${PGDATA}"
              mkdir -p "${SOCKDIR}"

              # Start a temporary local-only server (no TCP listen)
              echo "[ensure-db] Starting temporary postgres on port ${PORT} (local socket only)…"
              pg_ctl -D "$PGDATA" -o "-c listen_addresses='' -p ${PORT}" -w start

              # Create role if missing
              echo "[ensure-db] Ensuring role ${ROLE} exists…"
              psql -p "${PORT}" -d postgres -v ON_ERROR_STOP=1 <<SQL
DO \$\$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = '${ROLE}') THEN
    EXECUTE format('CREATE ROLE %I WITH LOGIN PASSWORD %L', '${ROLE}', '${PASS}');
  END IF;
END
\$\$;
SQL

              # Create DB if missing (owned by ROLE)
              echo "[ensure-db] Ensuring database ${DBNM} exists…"
              psql -p "${PORT}" -d postgres -v ON_ERROR_STOP=1 <<SQL
DO \$\$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_database WHERE datname = '${DBNM}') THEN
    EXECUTE format('CREATE DATABASE %I OWNER %I', '${DBNM}', '${ROLE}');
  END IF;
END
\$\$;
SQL

              echo "[ensure-db] Stopping temporary postgres…"
              pg_ctl -D "$PGDATA" -m fast -w stop
              echo "[ensure-db] Done."

          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data

      containers:
        - name: postgres
          image: {{ .Values.db.image | default "postgres:15" | quote }}
          env:
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          envFrom:
            - secretRef:
                name: {{ default "db-secrets" .Values.db.secrets.credsName | quote }}
          ports:
            - containerPort: 5432
          readinessProbe:
            exec:
              command: ["sh","-lc","pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
            initialDelaySeconds: 5
            periodSeconds: 5
          livenessProbe:
            exec:
              command: ["sh","-lc","pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
            initialDelaySeconds: 20
            periodSeconds: 10
          securityContext:
            runAsNonRoot: true
            runAsUser: 999
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data

      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: pg-data
{{- end }}
