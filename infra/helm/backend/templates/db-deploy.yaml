# devops-project1/infra/helm/backend/templates/db-deploy.yaml
{{- $db := (get .Values "db") | default (dict) -}}
{{- if (get $db "enabled" | default false) }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db
  labels:
    app: mario-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mario-db
  template:
    metadata:
      labels:
        app: mario-db
    spec:
      securityContext:
        fsGroup: 999
        fsGroupChangePolicy: OnRootMismatch

      initContainers:
        # 1) make sure the PVC is owned by the postgres UID/GID
        - name: fix-perms
          image: busybox:1.36
          securityContext:
            runAsUser: 0
          command: ["sh", "-c"]
          args:
            - |
              set -eu
              mkdir -p /var/lib/postgresql/data /var/lib/postgresql/data/pgdata
              chown -R 999:999 /var/lib/postgresql/data
              chmod 700 /var/lib/postgresql/data/pgdata || true
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data

        # 2) ensure roles & database exist inside the mounted cluster
        #    MUST run as postgres UID (NOT root), or postgres --single will refuse to run.
        - name: ensure-db
          image: {{ .Values.db.image | default "postgres:15" | quote }}
          securityContext:
            runAsUser: 999
            runAsNonRoot: true
          env:
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          envFrom:
            - secretRef:
                name: {{ default "db-secrets" .Values.db.secrets.credsName | quote }}
          command: ["sh", "-lc"]
          args:
            - |
              set -eu
              ROLE="${POSTGRES_USER:-mario}"
              PASS="${POSTGRES_PASSWORD:-mario123}"
              DBNM="${POSTGRES_DB:-mario}"

              echo "[ensure-db] Using PGDATA=$PGDATA ROLE=$ROLE DB=$DBNM"

              # create 'postgres' superuser if missing (some preseeded volumes lack it)
              cat <<'SQL' | postgres --single -D "$PGDATA" postgres
              DO $$
              BEGIN
                IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = 'postgres') THEN
                  CREATE ROLE postgres WITH SUPERUSER LOGIN;
                END IF;
              END $$;
              SQL

              # create app role if missing
              cat <<SQL | postgres --single -D "$PGDATA" postgres
              DO \$\$
              BEGIN
                IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = '${ROLE}') THEN
                  EXECUTE format('CREATE ROLE %I WITH LOGIN PASSWORD %L', '${ROLE}', '${PASS}');
                END IF;
              END \$\$;
              SQL

              # create app database if missing
              cat <<SQL | postgres --single -D "$PGDATA" postgres
              DO \$\$
              BEGIN
                IF NOT EXISTS (SELECT 1 FROM pg_database WHERE datname = '${DBNM}') THEN
                  EXECUTE format('CREATE DATABASE %I OWNER %I', '${DBNM}', '${ROLE}');
                END IF;
              END \$\$;
              SQL

          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data

      containers:
        - name: postgres
          image: {{ .Values.db.image | default "postgres:15" | quote }}
          env:
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          envFrom:
            - secretRef:
                name: {{ default "db-secrets" .Values.db.secrets.credsName | quote }}
          ports:
            - containerPort: 5432
          readinessProbe:
            exec:
              command: ["sh","-lc","pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
            initialDelaySeconds: 5
            periodSeconds: 5
          livenessProbe:
            exec:
              command: ["sh","-lc","pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
            initialDelaySeconds: 20
            periodSeconds: 10
          securityContext:
            runAsNonRoot: true
            runAsUser: 999
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data

      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: pg-data
{{- end }}
