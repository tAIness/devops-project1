apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pg-data
  namespace: mario-backend
spec:
  accessModes: [ReadWriteOnce]
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: db-secrets
  namespace: mario-backend
type: Opaque
stringData:
  POSTGRES_DB: supermario
  POSTGRES_USER: superuser
  POSTGRES_PASSWORD: superpass
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db
  namespace: mario-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mario-db
  template:
    metadata:
      labels:
        app: mario-db
    spec:
      # Ensure volume permissions match postgres (UID/GID 999 in the image)
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        fsGroup: 999
      terminationGracePeriodSeconds: 30
      containers:
        - name: postgres
          image: postgres:15
          ports:
            - containerPort: 5432
          envFrom:
            - secretRef:
                name: db-secrets
          # Probes
          readinessProbe:
            exec:
              command: ["sh","-c","pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
            initialDelaySeconds: 5
            periodSeconds: 5
          livenessProbe:
            exec:
              command: ["sh","-c","pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
            initialDelaySeconds: 20
            periodSeconds: 10
          # Resources (meets Task 5 requirement)
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: "1"
              memory: 512Mi
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: pg-data
---
apiVersion: v1
kind: Service
metadata:
  name: db
  namespace: mario-backend
spec:
  selector:
    app: mario-db
  ports:
    - name: pg
      port: 5432
      targetPort: 5432
