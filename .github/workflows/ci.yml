# .github/workflows/ci.yml
name: CI (PR checks)

on:
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pages: write        # for deploy-pages
  id-token: write     # for deploy-pages OIDC

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: pip
          cache-dependency-path: app/requirements.txt
      - name: Install deps for lint
        run: |
          python -m pip install -U pip
          pip install -r app/requirements.txt
          pip install "pylint==3.2.*"
      - name: Run pylint (in app/)
        working-directory: app
        run: python -m pylint --disable=C0114,C0116,W0718,W0212 *.py

  unit-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: pip
          cache-dependency-path: |
            app/requirements.txt
            app/tests/requirements.txt

      - name: Install deps
        run: |
          python -m pip install -U pip
          pip install -r app/requirements.txt
          pip install allure-pytest
          if [ -f app/tests/requirements.txt ]; then pip install -r app/tests/requirements.txt; fi

      - name: Run unit tests (exclude DB) + Allure
        working-directory: app
        run: |
          rm -rf allure-results
          mkdir -p allure-results
          python -m pytest -ra -m "not db" --junitxml=pytest-results.xml --alluredir=allure-results

      - name: Upload unit JUnit & Allure
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-unit
          path: |
            app/allure-results
            app/pytest-results.xml
          if-no-files-found: error

  db-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: supermario
          POSTGRES_USER: mario
          POSTGRES_PASSWORD: secret
        ports:
          - "5432:5432"
        options: >-
          --health-cmd="pg_isready -h 127.0.0.1 -p 5432 -U mario -d supermario"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    env:
      DB_NAME: supermario
      DB_USER: mario
      DB_PASSWORD: secret
      DB_HOST: 127.0.0.1
      DB_PORT: 5432
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install dependencies
        run: |
          pip install -r app/requirements.txt pytest psycopg2-binary allure-pytest
      - name: Run DB tests only + Allure
        working-directory: app
        run: |
          rm -rf allure-results
          mkdir -p allure-results
          python -m pytest -ra -m db tests/test_db.py --junitxml=pytest-results.xml --alluredir=allure-results

      - name: Upload DB JUnit & Allure
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-db
          path: |
            app/allure-results
            app/pytest-results.xml
          if-no-files-found: error

  e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Include content images in web context
        run: |
          mkdir -p web/content/images
          cp -R content/images/* web/content/images/ || true

      - name: Build app image for E2E
        uses: docker/build-push-action@v6
        with:
          context: app
          file: app/Dockerfile
          load: true
          tags: local/app:e2e

      - name: Build web image for E2E
        uses: docker/build-push-action@v6
        with:
          context: web
          file: web/Dockerfile
          load: true
          tags: local/web:e2e

      - name: Prep network & cleanup
        run: |
          docker rm -f app web db 2>/dev/null || true
          docker network rm e2e 2>/dev/null || true
          docker network create e2e

      - name: Start Postgres
        run: |
          docker run -d --name db \
            --network e2e \
            -p 5432:5432 \
            -e POSTGRES_DB=supermario \
            -e POSTGRES_USER=mario \
            -e POSTGRES_PASSWORD=secret \
            postgres:15

      - name: Wait for Postgres
        run: |
          for i in {1..30}; do
            if docker exec db pg_isready -h localhost -p 5432 -U mario -d supermario; then exit 0; fi
            echo "waiting for postgres…"
            sleep 2
          done
          echo "Postgres didn't get ready"; docker logs db; exit 1

      - name: Start app
        run: |
          docker run -d --name app \
            --network e2e \
            -p 8000:8000 \
            -e DATABASE_URL=postgresql://mario:secret@db:5432/supermario \
            -e PORT=8000 \
            local/app:e2e

      - name: Wait for app
        run: |
          for i in {1..30}; do
            if curl -fsS http://127.0.0.1:8000/health >/dev/null; then exit 0; fi
            sleep 2
          done
          echo "App didn't become healthy"; docker logs app; exit 1

      - name: Start web
        run: |
          docker run -d --name web \
            --network e2e \
            -p 8081:80 \
            local/web:e2e

      - name: Wait for web
        run: |
          for i in {1..30}; do
            if curl -fsSI http://127.0.0.1:8081 | grep -q '200 OK'; then exit 0; fi
            sleep 2
          done
          echo "Web didn't become ready"; docker logs web; exit 1

      # --- Playwright (+ Allure) ---
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install Node deps
        run: |
          npm ci
          npm i -D allure-playwright
          npx playwright install --with-deps

      - name: Run Playwright tests (emit Allure)
        run: |
          rm -rf allure-results
          ALLURE_RESULTS_DIR=allure-results npx playwright test
        env:
          BASE_URL: http://127.0.0.1:8081

      - name: Debug list e2e allure results
        if: always()
        run: |
          echo "Files in allure-results:"
          ls -lah allure-results || true
          echo "Count:" $(find allure-results -type f | wc -l)

      - name: Upload e2e Allure results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-e2e
          path: allure-results
          if-no-files-found: error

      - name: Upload e2e JUnit XML
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-e2e
          path: e2e/junit.xml
          if-no-files-found: error

  build:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Build app image (no push on PR)
        uses: docker/build-push-action@v6
        with:
          context: app
          file: app/Dockerfile
          push: false
          tags: local/app:pr-check
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build web image (no push on PR)
        uses: docker/build-push-action@v6
        with:
          context: web
          file: web/Dockerfile
          push: false
          tags: local/web:pr-check
          cache-from: type=gha
          cache-to: type=gha,mode=max

  snyk-pr:
    uses: tAIness/devops-ci-lib/.github/workflows/snyk-reusable.yml@main
    secrets: inherit
    with:
      dockerfiles: |
        app/Dockerfile
        web/Dockerfile
      ignore_list_path: security/ignores.txt
      severity: critical
      upload_artifacts: true

  # Merge Allure results from all test jobs, build report, publish to Pages
  allure-report:
    runs-on: ubuntu-latest
    needs: [ unit-tests, db-tests, e2e ]
    if: always()
    steps:
      - uses: actions/checkout@v4

      # ⬇️ Download artifacts into separate subfolders
      - name: Download Allure artifacts (unit)
        uses: actions/download-artifact@v4
        with:
          name: allure-results-unit
          path: results/unit

      - name: Download Allure artifacts (db)
        uses: actions/download-artifact@v4
        with:
          name: allure-results-db
          path: results/db

      - name: Download Allure artifacts (e2e)
        uses: actions/download-artifact@v4
        with:
          name: allure-results-e2e
          path: results/e2e

      # ⬇️ Merge all result files into one folder
      - name: Merge Allure result files
        shell: bash
        run: |
          set -euo pipefail
          echo "Tree under results/:"
          find results -maxdepth 3 -type d -print

          rm -rf merged
          mkdir -p merged

          # copy everything found in the three artifacts
          for d in results/unit results/db results/e2e; do
            if [ -d "$d" ]; then
              echo "Copying $d -> merged/"
              cp -R "$d"/. merged/
            fi
          done

          echo "Total files in merged/: $(find merged -type f | wc -l)"
          test "$(find merged -type f | wc -l)" -gt 0

      - name: Debug counts
        run: |
          echo "UNIT:" $(find results/unit -type f | wc -l)
          echo "DB:  " $(find results/db   -type f | wc -l)
          echo "E2E: " $(find results/e2e  -type f | wc -l)
          echo "MERGED:" $(find merged -type f | wc -l)

      # ⬇️ Build the Allure HTML from the merged folder
      - name: Generate Allure report
        uses: simple-elf/allure-report-action@v1.7
        with:
          allure_results: merged          # <— use the merged folder
          allure_report: public/allure/latest
          keep_reports: 10
          gh_pages: gh-pages
          allure_history: allure-history
          github_run_num: ${{ github.run_number }}
          github_run_id: ${{ github.run_id }}
          github_repo: ${{ github.repository }}
          github_repo_owner: ${{ github.repository_owner }}

      # ⬇️ Create a root redirect and fix perms (the action runs in a container)
      - name: Add root index + fix perms
        shell: bash
        run: |
          sudo chown -R "$USER:$(id -gn)" public || true
          mkdir -p public
          printf '<!doctype html><meta charset="utf-8"><meta http-equiv="refresh" content="0; url=allure/latest/index.html"><title>Allure Report</title><p><a href="allure/latest/index.html">Open the latest Allure report</a></p>' > public/index.html

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

  deploy-pages:
    if: always()
    needs: [ allure-report ]
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4

  notify-slack:
    if: always()
    needs: [ lint, unit-tests, db-tests, e2e, build, snyk-pr, allure-report, deploy-pages ]
    uses: tAIness/devops-ci-lib/.github/workflows/slack-notify.yml@main   # or @slack-notify-v1
    secrets: inherit
    with:
      title: "CI (PR checks): ${{ github.head_ref || github.ref_name }}"
      status: ${{ (
        needs.lint.result == 'failure' ||
        needs['unit-tests'].result == 'failure' ||
        needs['db-tests'].result == 'failure' ||
        needs.e2e.result == 'failure' ||
        needs.build.result == 'failure' ||
        needs['snyk-pr'].result == 'failure' ||
        needs['allure-report'].result == 'failure' ||
        needs['deploy-pages'].result == 'failure'
        ) && 'failure' || 'success' }}
      pages_url: "https://tainess.github.io/devops-project1/allure/latest/"
      only_on: "always"   # set to "failure" to notify only on failures
      run_url: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
      message: "PR #${{ github.event.pull_request.number || 'n/a' }} by @${{ github.actor }}"

