name: CI (PR checks)

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'web/**'
      - 'security/**'
      - '.github/workflows/**'
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: pr-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: pip
          cache-dependency-path: app/requirements.txt
      - name: Install deps
        run: |
          pip install -r app/requirements.txt pylint
      - name: Pylint
        run: python -m pylint app/*.py

  unit-tests:
    name: unit-tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: pip
          cache-dependency-path: |
            app/requirements.txt
            app/tests/requirements.txt
      - name: Install deps
        run: |
          pip install -r app/requirements.txt
          if [ -f app/tests/requirements.txt ]; then pip install -r app/tests/requirements.txt; fi
          pip install pytest
      - name: Run unit tests
        working-directory: app
        run: |
          mkdir -p ../test-results
          python -m pytest -q --junitxml=../test-results/junit.xml
      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-report
          path: test-results/junit.xml
          if-no-files-found: ignore

  build:
    name: build
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      # Build app image (no push). We don't load here to keep this job fast.
      - name: Build app image (no push)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: app/Dockerfile
          push: false
          platforms: linux/amd64
          tags: project1-app:pr-${{ github.event.pull_request.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build web image (no push)
      - name: Build web image (no push)
        uses: docker/build-push-action@v6
        with:
          context: ./web
          file: web/Dockerfile
          push: false
          platforms: linux/amd64
          tags: project1-web:pr-${{ github.event.pull_request.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  snyk:
    name: snyk
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]   # make sure code quality/tests pass before security
    timeout-minutes: 25
    env:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}           # org secret
      SNYK_IGNORE_EXPIRY_DAYS: 30                     # change if you want shorter/longer ignores
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      # Rebuild WITH load:true so the images are available locally to Snyk
      - name: Build & LOAD app image (local)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: app/Dockerfile
          push: false
          load: true
          platforms: linux/amd64
          tags: project1-app:pr-${{ github.event.pull_request.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & LOAD web image (local)
        uses: docker/build-push-action@v6
        with:
          context: ./web
          file: web/Dockerfile
          push: false
          load: true
          platforms: linux/amd64
          tags: project1-web:pr-${{ github.event.pull_request.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Install Snyk CLI
        run: |
          curl -fsSL https://static.snyk.io/cli/latest/snyk-linux -o /usr/local/bin/snyk
          chmod +x /usr/local/bin/snyk
          snyk --version

      # Turn your list into a temporary .snyk policy for this run
      - name: Apply ignore list
        run: |
          touch .snyk
          if [ -s security/ignores.txt ]; then
            while IFS= read -r ID; do
              [ -z "$ID" ] && continue
              case "$ID" in \#*) continue ;; esac
              EXPIRY="$(date -d "+${SNYK_IGNORE_EXPIRY_DAYS} days" +%Y-%m-%d)"
              echo "Ignoring $ID until $EXPIRY"
              snyk ignore --id="$ID" --expiry="$EXPIRY" --reason="CI temporary ignore list"
            done < security/ignores.txt
          fi
          echo "Final policy:"
          cat .snyk || true

      # Fail on High/Critical unless ignored
      - name: Snyk scan: app image
        run: |
          snyk container test project1-app:pr-${{ github.event.pull_request.number }} \
            --file=app/Dockerfile \
            --severity-threshold=high \
            --json-file-output=snyk-app.json
      - name: Snyk scan: web image
        run: |
          snyk container test project1-web:pr-${{ github.event.pull_request.number }} \
            --file=web/Dockerfile \
            --severity-threshold=high \
            --json-file-output=snyk-web.json

      - name: Upload Snyk reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: snyk-reports
          path: |
            snyk-app.json
            snyk-web.json
