name: CI (PR checks)

on:
  pull_request:
    branches:
    - main

permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: pip
        cache-dependency-path: app/requirements.txt
    - name: Install deps for lint
      run: |
        python -m pip install -U pip
        pip install -r app/requirements.txt pylint
    - name: Run pylint (in app/)
      working-directory: app
      run: python -m pylint --disable=C0114,C0116 *.py

  unit-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: pip
        cache-dependency-path: |
          app/requirements.txt
          app/tests/requirements.txt
    - name: Install deps
      run: |
        python -m pip install -U pip
        pip install -r app/requirements.txt
        if [ -f app/tests/requirements.txt ]; then pip install -r app/tests/requirements.txt; fi
    - name: Run unit tests
      working-directory: app
      run: python -m pytest -q --junitxml=pytest-results.xml
    - name: Upload test report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: unit-test-results
        path: app/pytest-results.xml

  db-tests:
    name: Run DB integration tests
    runs-on: ubuntu-latest
    needs: [deploy-ec2]   # wait until deployment done
    env:
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
    steps:

    - uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install dependencies
      run: |
         pip install -r app/requirements.txt pytest psycopg2-binary

    - name: Run DB tests
      run: |
          pytest tests/test_db.py -v --junitxml=pytest-results.xml

    - name: Upload test results
      if: always()  # upload even if tests fail
      uses: actions/upload-artifact@v4
      with:
        name: db-test-results
        path: pytest-results.xml

    - name: Run DB integration tests
      run: |
         pip install pytest psycopg2-binary
         pytest -v tests/test_db.py

    - name: Check migrations
      run: alembic upgrade head

  build:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
    - uses: actions/checkout@v4
    - uses: docker/setup-buildx-action@v3
    - name: Build app image (no push on PR)
      uses: docker/build-push-action@v6
      with:
        context: app
        file: app/Dockerfile
        push: false
        tags: local/app:pr-check
    - name: Build web image (no push on PR)
      uses: docker/build-push-action@v6
      with:
        context: web
        file: web/Dockerfile
        push: false
        tags: local/web:pr-check

  snyk-pr:
    # Rebuilds images internally and scans them; does not rely on the build job
    uses: tAIness/devops-ci-lib/.github/workflows/snyk-reusable.yml@main
    secrets: inherit
    with:
      dockerfiles: |
        app/Dockerfile
        web/Dockerfile
      ignore_list_path: security/ignores.txt
      severity: high
      upload_artifacts: true
