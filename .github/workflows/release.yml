# yamllint disable rule:line-length rule:indentation
---
name: Release

on:
  push:
    branches: [main]
    tags: ['v*.*.*']
  workflow_dispatch:
    inputs:
      target:
        description: "Deploy target (mac = self-hosted, ec2 = remote EC2)"
        type: choice
        options: [mac, ec2]
        default: mac

permissions:
  contents: write
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ------------------------------------------------------------
  # Resolve deploy target once (input > org/repo var > default)
  # ------------------------------------------------------------
  resolve-target:
    name: Resolve deploy target
    runs-on: ubuntu-latest
    outputs:
      target: ${{ steps.out.outputs.target }}
    steps:
      - id: out
        shell: bash
        run: |
          in="${{ inputs.target }}"
          var="${{ vars.DEPLOY_TARGET }}"
          tgt="${in:-${var:-mac}}"
          echo "target=$tgt" >> "$GITHUB_OUTPUT"
          echo "Deploy target resolved to: $tgt"

  # ----------------------------------------------------------
  # Tag computation: continue v*.*.* series (patch bumps)
  # ----------------------------------------------------------
  compute-tag:
    name: Compute next tag (when pushing to main)
    runs-on: ubuntu-latest
    if: ${{ github.ref_type == 'branch' && github.ref_name == 'main' }}
    outputs:
      tag: ${{ steps.bump.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Compute next tag (no create)
        id: bump
        shell: bash
        run: |
          set -euo pipefail
          git fetch --tags --force
          last="$(git tag -l 'v*.*.*' | sort -V | tail -n1 || true)"
          if [[ -z "$last" ]]; then
            major=1 minor=0 patch=1
          else
            IFS=. read -r vM vN vP <<<"${last#v}"
            major="$vM"; minor="$vN"; patch="$vP"
            patch=$((10#$patch + 1))
          fi
          echo "tag=v${major}.${minor}.${patch}" >> "$GITHUB_OUTPUT"
          echo "Next tag: v${major}.${minor}.${patch}"

  # ----------------------------------------------------------
  # Decide IMAGE_TAG: either pushed tag or computed next
  # ----------------------------------------------------------
  setup:
    name: Resolve image tag
    runs-on: ubuntu-latest
    needs: [compute-tag]
    outputs:
      IMAGE_TAG: ${{ steps.resolve.outputs.IMAGE_TAG }}
    steps:
      - id: resolve
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "IMAGE_TAG=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
          else
            echo "IMAGE_TAG=${{ needs.compute-tag.outputs.tag }}" >> "$GITHUB_OUTPUT"
          fi

  # ----------------------------------------------------------
  # Bump helm appVersions on main
  # ----------------------------------------------------------
  bump-helm-appversion:
    name: Bump Helm appVersion in all charts & push
    runs-on: ubuntu-latest
    needs: [compute-tag]
    if: ${{ github.ref_type == 'branch' && github.ref_name == 'main' }}
    env:
      TAG: ${{ needs.compute-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Install yq (static)
        run: |
          set -euo pipefail
          YQ_VERSION=v4.44.3
          OS=$(uname); ARCH=$(uname -m)
          case "$ARCH" in x86_64) ARCH=amd64;; aarch64|arm64) ARCH=arm64;; esac
          curl -fsSL -o /usr/local/bin/yq "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_${OS}_${ARCH}"
          chmod +x /usr/local/bin/yq
          yq --version
      - name: Update appVersion for ALL charts + write releaseTag
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t charts < <(git ls-files 'infra/helm/**/Chart.yaml')
          if (( ${#charts[@]} == 0 )); then
            echo "No Chart.yaml found under infra/helm"; exit 1
          fi
          for f in "${charts[@]}"; do
            echo "Updating $f to appVersion=${TAG}"
            yq -i '.appVersion = env(TAG)' "$f"
          done
          echo "Setting global.releaseTag=${TAG} in infra/helm/argocd-apps/values.yaml"
          yq -i '.global.releaseTag = env(TAG)' infra/helm/argocd-apps/values.yaml
      - name: Commit & push change
        run: |
          set -euo pipefail
          git config user.name  "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          if git diff --quiet; then
            echo "No changes to commit."
          else
            git add infra/helm/**/Chart.yaml infra/helm/argocd-apps/values.yaml
            git commit -m "chore(helm): set appVersion & releaseTag ${TAG}"
            git push origin HEAD:main
          fi

  create-tag:
    name: Create & push git tag
    runs-on: ubuntu-latest
    needs: [compute-tag, bump-helm-appversion]
    if: ${{ github.ref_type == 'branch' && github.ref_name == 'main' }}
    env:
      TAG: ${{ needs.compute-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Configure git identity
        run: |
          git config user.name  "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
      - name: Tag & push
        shell: bash
        run: |
          set -euo pipefail
          git fetch --all --tags
          git checkout main
          git pull --ff-only
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists; skipping create."
          else
            git tag -a "$TAG" -m "Release $TAG"
            git push origin "$TAG"
          fi

  # ----------------------------------------------------------
  # Build & push APP image (multi-arch)
  # ----------------------------------------------------------
  build-and-push-app:
    name: Build & push app image
    runs-on: ubuntu-latest
    needs: [setup]
    env:
      IMAGE_TAG: ${{ needs.setup.outputs.IMAGE_TAG }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      DOCKERHUB_REPO_APP: ${{ secrets.DOCKERHUB_REPO_APP }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        if: ${{ env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_TOKEN != '' }}
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}
      - name: Build & push (linux/amd64, linux/arm64)
        uses: docker/build-push-action@v6
        with:
          context: ./app
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.DOCKERHUB_REPO_APP }}:${{ env.IMAGE_TAG }}

  # ----------------------------------------------------------
  # Build & push WEB image (multi-arch)
  # ----------------------------------------------------------
  build-and-push-web:
    name: Build & push web image
    runs-on: ubuntu-latest
    needs: [setup]
    env:
      IMAGE_TAG: ${{ needs.setup.outputs.IMAGE_TAG }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      DOCKERHUB_REPO_WEB: ${{ secrets.DOCKERHUB_REPO_WEB }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        if: ${{ env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_TOKEN != '' }}
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}
      - name: Build & push (linux/amd64, linux/arm64)
        uses: docker/build-push-action@v6
        with:
          context: ./web
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.DOCKERHUB_REPO_WEB }}:${{ env.IMAGE_TAG }}

  # ----------------------------------------------------------
  # Snyk (mandatory)
  # ----------------------------------------------------------
  snyk-release:
    name: Snyk scan of images
    runs-on: ubuntu-latest
    needs: [setup, build-and-push-app, build-and-push-web]
    env:
      IMAGE_TAG: ${{ needs.setup.outputs.IMAGE_TAG }}
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      DOCKERHUB_REPO_APP: ${{ secrets.DOCKERHUB_REPO_APP }}
      DOCKERHUB_REPO_WEB: ${{ secrets.DOCKERHUB_REPO_WEB }}
    steps:
      - uses: actions/checkout@v4
      - uses: snyk/actions/setup@0.4.0
      - run: snyk auth "$SNYK_TOKEN"
      - name: Build .snyk from ignore list (if present)
        shell: bash
        run: |
          set -euo pipefail
          touch .snyk
          if [[ -f "security/ignores.txt" ]]; then
            grep -v '^\s*#' security/ignores.txt | sed '/^\s*$/d' | while read -r ID; do
              snyk ignore --id="$ID" --reason="approved via repo ignore list" --expiry=2099-12-31 --yes --quiet || true
            done
          fi
      - name: Scan & save JSON
        id: scan
        shell: bash
        run: |
          set +e
          set -u -o pipefail
          printf "%s\n" \
            "${DOCKERHUB_REPO_APP}:${IMAGE_TAG}" \
            "${DOCKERHUB_REPO_WEB}:${IMAGE_TAG}" > images.txt
          failures=0
          while read -r IMG; do
            [[ -z "$IMG" ]] && continue
            SAFE="$(echo "$IMG" | tr '/:@' '___')"
            OUT="snyk-${SAFE}.json"
            snyk container test "$IMG" --severity-threshold=high --json-file-output="$OUT"
            rc=$?
            if [ ! -s "$OUT" ]; then
              snyk container test "$IMG" --severity-threshold=high --json > "$OUT" 2>/dev/null || echo '{"note":"no json"}' > "$OUT"
            fi
            if [ $rc -ne 0 ]; then failures=$((failures+1)); fi
          done < images.txt
          echo "failures=$failures" >> "$GITHUB_OUTPUT"
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: snyk-reports
          path: snyk-*.json
          if-no-files-found: warn
      - name: Fail if any image failed
        if: ${{ steps.scan.outputs.failures != '0' }}
        run: |
          echo "Blocking release: Snyk found issues above threshold."
          exit 1

  # ----------------------------------------------------------
  # Deploy to EC2 (only when target == ec2)
  # ----------------------------------------------------------
  deploy-ec2:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: [resolve-target, setup, build-and-push-app, build-and-push-web, snyk-release, create-tag]
    if: ${{ needs.resolve-target.outputs.target == 'ec2' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')) }}
    steps:
      - run: echo "EC2 flow is currently disabled; using Mac until EC2 is back."

  # ----------------------------------------------------------
  # Deploy to Mac (self-hosted) + mirror APP & WEB to local Nexus
  # ----------------------------------------------------------
  deploy-mac:
    name: Deploy on Mac (self-hosted)
    runs-on: [self-hosted, macOS]
    needs: [resolve-target, setup, build-and-push-app, build-and-push-web, snyk-release, create-tag]
    if: ${{ needs.resolve-target.outputs.target == 'mac' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')) }}
    env:
      TAG: ${{ needs.setup.outputs.IMAGE_TAG }}
      # Docker Hub
      DOCKERHUB_REPO_APP: ${{ secrets.DOCKERHUB_REPO_APP }}
      DOCKERHUB_REPO_WEB: ${{ secrets.DOCKERHUB_REPO_WEB }}
      DH_USER: ${{ secrets.DOCKERHUB_USERNAME }}
      DH_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      # DB & app config
      DB_NAME: ${{ vars.DB_NAME }}
      DB_USER: ${{ vars.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_PORT: ${{ vars.DB_PORT }}
      FLASK_PORT: ${{ vars.FLASK_PORT }}
      # Nexus (local on Mac)
      DEPLOY_REGISTRY: ${{ secrets.DEPLOY_REGISTRY }}     # 'nexus' to enable mirroring/using Nexus
      NEXUS_DOMAIN: ${{ secrets.NEXUS_REGISTRY_DOMAIN }}  # e.g. 127.0.0.1:5000
      NEXUS_USER: ${{ secrets.NEXUS_USERNAME }}
      NEXUS_PASS: ${{ secrets.NEXUS_PASSWORD }}
      NEXUS_REPO_APP: ${{ secrets.NEXUS_REPO_APP }}       # e.g. supermario-service
      NEXUS_REPO_WEB: ${{ secrets.NEXUS_REPO_WEB }}       # e.g. supermario-front
    steps:
      - uses: actions/checkout@v4

      - name: Ensure docker login to Hub (pull fallback)
        if: ${{ env.DH_USER != '' && env.DH_TOKEN != '' }}
        run: echo "${DH_TOKEN}" | docker login -u "${DH_USER}" --password-stdin

      - name: Mirror APP & WEB to local Nexus (on Mac runner)
        if: ${{ env.DEPLOY_REGISTRY == 'nexus' }}
        shell: bash
        run: |
          set -euo pipefail
          # Install skopeo on the Mac runner
          if ! command -v skopeo >/dev/null 2>&1; then
            brew update
            brew install skopeo
          fi

          SRC_APP="docker://${DOCKERHUB_REPO_APP}:${TAG}"
          SRC_WEB="docker://${DOCKERHUB_REPO_WEB}:${TAG}"
          DST_APP="docker://${NEXUS_DOMAIN}/${NEXUS_REPO_APP}:${TAG}"
          DST_WEB="docker://${NEXUS_DOMAIN}/${NEXUS_REPO_WEB}:${TAG}"

          echo "Mirroring ${SRC_APP} -> ${DST_APP}"
          skopeo copy \
            --src-creds "${DH_USER}:${DH_TOKEN}" \
            --dest-creds "${NEXUS_USER}:${NEXUS_PASS}" \
            --src-tls-verify=true --dest-tls-verify=false \
            "${SRC_APP}" "${DST_APP}"

          echo "Mirroring ${SRC_WEB} -> ${DST_WEB}"
          skopeo copy \
            --src-creds "${DH_USER}:${DH_TOKEN}" \
            --dest-creds "${NEXUS_USER}:${NEXUS_PASS}" \
            --src-tls-verify=true --dest-tls-verify=false \
            "${SRC_WEB}" "${DST_WEB}"

          # Also tag 'latest' in Nexus (optional)
          skopeo copy \
            --src-creds "${DH_USER}:${DH_TOKEN}" \
            --dest-creds "${NEXUS_USER}:${NEXUS_PASS}" \
            --src-tls-verify=true --dest-tls-verify=false \
            "${SRC_APP}" "docker://${NEXUS_DOMAIN}/${NEXUS_REPO_APP}:latest"
          skopeo copy \
            --src-creds "${DH_USER}:${DH_TOKEN}" \
            --dest-creds "${NEXUS_USER}:${NEXUS_PASS}" \
            --src-tls-verify=true --dest-tls-verify=false \
            "${SRC_WEB}" "docker://${NEXUS_DOMAIN}/${NEXUS_REPO_WEB}:latest"

      - name: Write .env.local for local compose (point to Nexus or Hub)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p mac-release-flow

          if [[ "${DEPLOY_REGISTRY:-hub}" == "nexus" ]]; then
            APP_REPO="${NEXUS_DOMAIN}/${NEXUS_REPO_APP}"
            WEB_REPO="${NEXUS_DOMAIN}/${NEXUS_REPO_WEB}"
          else
            APP_REPO="${DOCKERHUB_REPO_APP}"
            WEB_REPO="${DOCKERHUB_REPO_WEB}"
          fi

          cat > mac-release-flow/.env.local <<EOF
          DOCKERHUB_REPO_APP=${APP_REPO}
          DOCKERHUB_REPO_WEB=${WEB_REPO}
          TAG=${TAG}
          DB_NAME=${DB_NAME}
          DB_USER=${DB_USER}
          DB_PASSWORD=${DB_PASSWORD}
          DB_PORT=${DB_PORT}
          FLASK_PORT=${FLASK_PORT}
          EOF
          echo "==== mac-release-flow/.env.local ===="
          cat mac-release-flow/.env.local

      - name: Ensure volume & best-effort pulls
        run: |
          docker volume create supermario_db_data >/dev/null
          APP_REPO="$(grep '^DOCKERHUB_REPO_APP=' mac-release-flow/.env.local | cut -d= -f2)"
          WEB_REPO="$(grep '^DOCKERHUB_REPO_WEB=' mac-release-flow/.env.local | cut -d= -f2)"
          docker pull "${APP_REPO}:${TAG}" || true
          docker pull "${WEB_REPO}:${TAG}" || true

      - name: Compose up on Mac
        run: |
          docker compose -f mac-release-flow/deploy/compose.local.yml up -d --no-build
          docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'

  # ----------------------------------------------------------
  # Slack notification (always)
  # ----------------------------------------------------------
  notify-slack:
    if: ${{ always() }}
    needs:
      - resolve-target
      - compute-tag
      - setup
      - bump-helm-appversion
      - create-tag
      - build-and-push-app
      - build-and-push-web
      - snyk-release
      - deploy-ec2
      - deploy-mac
    uses: tAIness/devops-ci-lib/.github/workflows/slack-notify.yml@main
    secrets: inherit
    with:
      title: "Release: ${{ needs.setup.outputs.IMAGE_TAG || github.ref_name }}"
      status: ${{ (needs['build-and-push-app'].result == 'failure' || needs['build-and-push-web'].result == 'failure' || needs['snyk-release'].result == 'failure' || (needs.resolve-target.outputs.target == 'ec2' && needs['deploy-ec2'].result == 'failure') || (needs.resolve-target.outputs.target == 'mac' && needs['deploy-mac'].result == 'failure')) && 'failure' || 'success' }}
      only_on: "always"
      run_url: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
      message: "Actor: @${{ github.actor }} · Ref: ${{ github.ref_name }}"
