# yamllint disable rule:line-length rule:indentation

---
name: Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  workflow_dispatch: {}

permissions:
  contents: write
  packages: write

jobs:
  autotag:
    name: Create tag (if push to main)
    runs-on: ubuntu-latest
    if: ${{ github.ref_type == 'branch' && github.ref_name == 'main' }}
    outputs:
      tag: ${{ steps.bump.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compute and create next tag
        id: bump
        shell: bash
        run: |
          set -euo pipefail
          git fetch --tags --force

          last="$(git tag -l 'v*.*.*' | sort -V | tail -n1)"
          if [[ -z "$last" ]]; then
            major=0 minor=1 patch=0
          else
            IFS=. read -r vM vN vP <<<"${last#v}"
            major="$vM"; minor="$vN"; patch="$vP"
            patch=$((patch+1))
          fi
          tag="v${major}.${minor}.${patch}"
          echo "tag=$tag" >> "$GITHUB_OUTPUT"

          git config user.name  "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git tag -a "$tag" -m "Release $tag"
          git push origin "$tag"

  setup:
    name: Resolve image tag
    runs-on: ubuntu-latest
    needs:
      - autotag
    outputs:
      IMAGE_TAG: ${{ steps.resolve.outputs.IMAGE_TAG }}
    steps:
      - id: resolve
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${{ needs.autotag.outputs.tag }}" != "" ]]; then
            echo "IMAGE_TAG=${{ needs.autotag.outputs.tag }}" >> "$GITHUB_OUTPUT"
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "IMAGE_TAG=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
          else
            echo "IMAGE_TAG=${{ github.sha }}" >> "$GITHUB_OUTPUT"
          fi

  build-and-push-app:
    name: Build & push app image
    runs-on: ubuntu-latest
    needs:
      - setup
    env:
      IMAGE_TAG: ${{ needs.setup.outputs.IMAGE_TAG }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      DOCKERHUB_REPO_APP: ${{ secrets.DOCKERHUB_REPO_APP }}
      NEXUS_REGISTRY_DOMAIN: ${{ secrets.NEXUS_REGISTRY_DOMAIN }}
      NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
      NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: ${{ env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_TOKEN != '' }}
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Build & push app
        uses: docker/build-push-action@v6
        with:
          context: ./app
          push: true
          tags: |
            ${{ env.DOCKERHUB_REPO_APP }}:${{ env.IMAGE_TAG }}

      - name: Login to Nexus (optional)
        if: ${{ env.NEXUS_REGISTRY_DOMAIN != '' && env.NEXUS_USERNAME != '' && env.NEXUS_PASSWORD != '' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.NEXUS_REGISTRY_DOMAIN }}
          username: ${{ env.NEXUS_USERNAME }}
          password: ${{ env.NEXUS_PASSWORD }}

      - name: Mirror app to Nexus (optional)
        if: ${{ env.NEXUS_REGISTRY_DOMAIN != '' && env.NEXUS_USERNAME != '' && env.NEXUS_PASSWORD != '' }}
        shell: bash
        run: |
          set -euo pipefail
          docker pull "${DOCKERHUB_REPO_APP}:${IMAGE_TAG}"
          docker tag  "${DOCKERHUB_REPO_APP}:${IMAGE_TAG}" "${NEXUS_REGISTRY_DOMAIN}/devops-app:${IMAGE_TAG}"
          docker push "${NEXUS_REGISTRY_DOMAIN}/devops-app:${IMAGE_TAG}"

  build-and-push-web:
    name: Build & push web image
    runs-on: ubuntu-latest
    needs:
      - setup
    env:
      IMAGE_TAG: ${{ needs.setup.outputs.IMAGE_TAG }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      DOCKERHUB_REPO_WEB: ${{ secrets.DOCKERHUB_REPO_WEB }}
      NEXUS_REGISTRY_DOMAIN: ${{ secrets.NEXUS_REGISTRY_DOMAIN }}
      NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
      NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: ${{ env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_TOKEN != '' }}
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Build & push web
        uses: docker/build-push-action@v6
        with:
          context: ./web
          push: true
          tags: |
            ${{ env.DOCKERHUB_REPO_WEB }}:${{ env.IMAGE_TAG }}

      - name: Login to Nexus (optional)
        if: ${{ env.NEXUS_REGISTRY_DOMAIN != '' && env.NEXUS_USERNAME != '' && env.NEXUS_PASSWORD != '' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.NEXUS_REGISTRY_DOMAIN }}
          username: ${{ env.NEXUS_USERNAME }}
          password: ${{ env.NEXUS_PASSWORD }}

      - name: Mirror web to Nexus (optional)
        if: ${{ env.NEXUS_REGISTRY_DOMAIN != '' && env.NEXUS_USERNAME != '' && env.NEXUS_PASSWORD != '' }}
        shell: bash
        run: |
          set -euo pipefail
          docker pull "${DOCKERHUB_REPO_WEB}:${IMAGE_TAG}"
          docker tag  "${DOCKERHUB_REPO_WEB}:${IMAGE_TAG}" "${NEXUS_REGISTRY_DOMAIN}/devops-web:${IMAGE_TAG}"
          docker push "${NEXUS_REGISTRY_DOMAIN}/devops-web:${IMAGE_TAG}"

  snyk-release:
    name: Snyk scan of pushed images
    runs-on: ubuntu-latest
    needs:
      - setup
      - build-and-push-app
      - build-and-push-web
    env:
      IMAGE_TAG: ${{ needs.setup.outputs.IMAGE_TAG }}
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      DOCKERHUB_REPO_APP: ${{ secrets.DOCKERHUB_REPO_APP }}
      DOCKERHUB_REPO_WEB: ${{ secrets.DOCKERHUB_REPO_WEB }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Snyk
        uses: snyk/actions/setup@0.4.0

      - name: Auth Snyk
        run: snyk auth "$SNYK_TOKEN"

      - name: Build .snyk policy (ignores)
        shell: bash
        run: |
          set -euo pipefail
          touch .snyk
          if [[ -f "security/ignores.txt" ]]; then
            grep -v '^\s*#' security/ignores.txt | sed '/^\s*$/d' | while read -r ID; do
              snyk ignore --id="$ID" --reason="approved via repo ignore list" --expiry=2099-12-31 --yes --quiet || true
            done
          fi

      - name: Scan images and collect reports
        id: scan
        shell: bash
        run: |
          set +e
          set -u -o pipefail
          printf "%s\n" \
            "${DOCKERHUB_REPO_APP}:${IMAGE_TAG}" \
            "${DOCKERHUB_REPO_WEB}:${IMAGE_TAG}" > images.txt
          failures=0
          while read -r IMG; do
            [[ -z "$IMG" ]] && continue
            echo "=== Snyk test: $IMG"
            SAFE="$(echo "$IMG" | tr '/:@' '___')"
            OUT="snyk-${SAFE}.json"
            snyk container test "$IMG" --severity-threshold=high --json-file-output="$OUT"
            rc=$?
            if [ ! -s "$OUT" ]; then
              snyk container test "$IMG" --severity-threshold=high --json > "$OUT" 2>/dev/null || echo '{"note":"no json produced"}' > "$OUT"
            fi
            head -n 25 "$OUT" || true
            if [ $rc -ne 0 ]; then
              failures=$((failures+1))
            fi
          done < images.txt
          echo "failures=$failures" >> "$GITHUB_OUTPUT"

      - name: Upload Snyk reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: snyk-reports
          path: snyk-*.json
          if-no-files-found: warn

      - name: Fail if any image failed
        if: ${{ steps.scan.outputs.failures != '0' }}
        run: |
          echo "Snyk found un-ignored vulnerabilities (>= high)."
          exit 1

  deploy-ec2:
    name: Deploy to EC2 (Hub/Nexus)
    runs-on: ubuntu-latest
    needs:
      - build-and-push-app
      - build-and-push-web
      - snyk-release
    if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') }}
    env:
      TAG: ${{ needs.setup.outputs.IMAGE_TAG }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify deploy payload exists
        shell: bash
        run: |
          echo "Repo root:"; ls -lah
          echo "deploy/:"; ls -lah deploy || true
          echo "content/images/:"; ls -lah content/images || true
          test -f deploy/compose.yml

      - name: Prepare target dir on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            sudo mkdir -p /srv/supermario
            sudo chown -R $USER:$USER /srv/supermario

      - name: Upload compose.yml
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: |
            deploy/compose.yml
          target: /srv/supermario
          strip_components: 1

      - name: Upload static images (optional)
        if: ${{ hashFiles('content/images/**') != '' }}
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: |
            content/images/**
          target: /srv/supermario

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.0.3
        env:
          TAG: ${{ needs.setup.outputs.IMAGE_TAG }}
          DH_USER: ${{ secrets.DOCKERHUB_USERNAME }}
          DH_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          DH_REPO_APP: ${{ secrets.DOCKERHUB_REPO_APP }}
          DH_REPO_WEB: ${{ secrets.DOCKERHUB_REPO_WEB }}
          NEXUS_DOMAIN: ${{ secrets.NEXUS_REGISTRY_DOMAIN }}
          NEXUS_USER: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASS: ${{ secrets.NEXUS_PASSWORD }}
          NEXUS_REPO_APP: ${{ secrets.NEXUS_REPO_APP }}
          NEXUS_REPO_WEB: ${{ secrets.NEXUS_REPO_WEB }}
          DEPLOY_REGISTRY: ${{ secrets.DEPLOY_REGISTRY }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail
            sudo mkdir -p /srv/supermario/content/images
            cd /srv/supermario

            REG="${DEPLOY_REGISTRY:-hub}"
            if [ "$REG" = "nexus" ]; then
              sudo docker login "${NEXUS_DOMAIN}" -u "${NEXUS_USER}" -p "${NEXUS_PASS}"
              IMAGE_REPO_APP="${NEXUS_REPO_APP}"
              IMAGE_REPO_WEB="${NEXUS_REPO_WEB}"
            else
              sudo docker login -u "${DH_USER}" -p "${DH_TOKEN}"
              IMAGE_REPO_APP="${DH_REPO_APP}"
              IMAGE_REPO_WEB="${DH_REPO_WEB}"
            fi

            {
              echo "IMAGE_REPO_APP=${IMAGE_REPO_APP}"
              echo "IMAGE_REPO_WEB=${IMAGE_REPO_WEB}"
              echo "TAG=${TAG}"
            } | sudo tee .env >/dev/null

            echo "Pulling:"
            echo "  ${IMAGE_REPO_APP}:${TAG}"
            echo "  ${IMAGE_REPO_WEB}:${TAG}"

            sudo docker pull "${IMAGE_REPO_APP}:${TAG}"
            sudo docker pull "${IMAGE_REPO_WEB}:${TAG}"

            sudo docker compose -f compose.yml pull
            sudo docker compose -f compose.yml up -d --no-build
            sudo docker image prune -f
