# yamllint disable rule:line-length rule:indentation
---

name: Release

on:
  push:
    branches: [main]
    tags: ['v*.*.*']
  workflow_dispatch: {}

permissions:
  contents: write   # needed to create/push git tag
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  autotag:
    name: Create tag (if push to main)
    runs-on: ubuntu-latest
    if: ${{ github.ref_type == 'branch' && github.ref_name == 'main' }}
    outputs:
      tag: ${{ steps.bump.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with: {fetch-depth: 0}

      - name: Compute and create next tag
        id: bump
        shell: bash
        run: |
          set -euo pipefail
          git fetch --tags --force
          last="$(git tag -l 'v*.*.*' | sort -V | tail -n1)"
          if [[ -z "$last" ]]; then
            major=0 minor=1 patch=0
          else
            IFS=. read -r vM vN vP <<<"${last#v}"
            major="$vM"; minor="$vN"; patch="$vP"
            patch=$((patch+1))
          fi
          tag="v${major}.${minor}.${patch}"
          echo "tag=$tag" >> "$GITHUB_OUTPUT"
          git config user.name  "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git tag -a "$tag" -m "Release $tag"
          git push origin "$tag"

  setup:
    name: Resolve image tag
    runs-on: ubuntu-latest
    needs: [autotag]
    outputs:
      IMAGE_TAG: ${{ steps.resolve.outputs.IMAGE_TAG }}
    steps:
      - id: resolve
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${{ needs.autotag.outputs.tag }}" != "" ]]; then
            echo "IMAGE_TAG=${{ needs.autotag.outputs.tag }}" >> "$GITHUB_OUTPUT"
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "IMAGE_TAG=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
          else
            # fallback: commit SHA (no 'edge')
            echo "IMAGE_TAG=${{ github.sha }}" >> "$GITHUB_OUTPUT"
          fi

  build-and-push-app:
    name: Build & push app image
    runs-on: ubuntu-latest
    needs: [ setup ]
    env:
      IMAGE_TAG: ${{ needs.setup.outputs.IMAGE_TAG }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      DOCKERHUB_REPO_APP: ${{ secrets.DOCKERHUB_REPO_APP }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: ${{ env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_TOKEN != '' }}
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Build app (no push)
        uses: docker/build-push-action@v6
        with:
          context: ./app
          push: false
          load: true
          tags: ${{ env.DOCKERHUB_REPO_APP }}:${{ env.IMAGE_TAG }}

      - name: Push app with retry
        shell: bash
        env:
          REGISTRY_DOMAIN: https://index.docker.io/v1/
          REGISTRY_USERNAME: ${{ env.DOCKERHUB_USERNAME }}
          REGISTRY_PASSWORD: ${{ env.DOCKERHUB_TOKEN }}
          APP_IMAGE: ${{ env.DOCKERHUB_REPO_APP }}:${{ env.IMAGE_TAG }}
        run: |
          set -euo pipefail
          echo "$REGISTRY_PASSWORD" | docker login "$REGISTRY_DOMAIN" -u "$REGISTRY_USERNAME" --password-stdin
          for i in 1 2 3 4 5; do
            echo "Push attempt $i for $APP_IMAGE…"
            if docker push "$APP_IMAGE"; then
              echo "Push succeeded for $APP_IMAGE."
              break
            fi
            echo "Push failed; re-login & backoff…"
            docker logout "$REGISTRY_DOMAIN" || true
            echo "$REGISTRY_PASSWORD" | docker login "$REGISTRY_DOMAIN" -u "$REGISTRY_USERNAME" --password-stdin
            sleep $((i*10))
            if [ "$i" = 5 ]; then echo "Push failed after retries"; exit 1; fi
          done

      - name: Mirror APP to Nexus on EC2 (no public 5000 needed)
        uses: appleboy/ssh-action@v1.0.3
        env:
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          DOCKERHUB_REPO_APP: ${{ secrets.DOCKERHUB_REPO_APP }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
          NEXUS_REPO_APP: ${{ secrets.NEXUS_REPO_APP }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_SSH_PORT || '22' }}
          envs: IMAGE_TAG,DOCKERHUB_REPO_APP,DOCKERHUB_USERNAME,DOCKERHUB_TOKEN,NEXUS_USERNAME,NEXUS_PASSWORD,NEXUS_REPO_APP
          script: |
            set -euo pipefail
            # Install skopeo if missing
            if ! command -v skopeo >/dev/null 2>&1; then
              sudo apt-get update -y
              sudo apt-get install -y skopeo
            fi

            SRC="docker://${DOCKERHUB_REPO_APP}:${IMAGE_TAG}"
            # Talk to Nexus locally (HTTP) so no SG change required
            DST="docker://127.0.0.1:5000/${NEXUS_REPO_APP}:${IMAGE_TAG}"

            # Copy Hub -> Nexus; disable TLS on dest because Nexus is HTTP
            skopeo copy \
              --src-creds "${DOCKERHUB_USERNAME}:${DOCKERHUB_TOKEN}" \
              --dest-creds "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" \
              --src-tls-verify=true \
              --dest-tls-verify=false \
              "${SRC}" "${DST}"

            # also tag :latest
            skopeo copy \
              --src-creds "${DOCKERHUB_USERNAME}:${DOCKERHUB_TOKEN}" \
              --dest-creds "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" \
              --src-tls-verify=true \
              --dest-tls-verify=false \
              "${SRC}" "docker://127.0.0.1:5000/${NEXUS_REPO_APP}:latest"

  build-and-push-web:
    name: Build & push web image
    runs-on: ubuntu-latest
    needs: [ setup ]
    env:
      IMAGE_TAG: ${{ needs.setup.outputs.IMAGE_TAG }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      DOCKERHUB_REPO_WEB: ${{ secrets.DOCKERHUB_REPO_WEB }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: ${{ env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_TOKEN != '' }}
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Build web (no push)
        uses: docker/build-push-action@v6
        with:
          context: ./web
          push: false
          load: true
          tags: ${{ env.DOCKERHUB_REPO_WEB }}:${{ env.IMAGE_TAG }}

      - name: Push web with retry
        shell: bash
        env:
          REGISTRY_DOMAIN: https://index.docker.io/v1/
          REGISTRY_USERNAME: ${{ env.DOCKERHUB_USERNAME }}
          REGISTRY_PASSWORD: ${{ env.DOCKERHUB_TOKEN }}
          WEB_IMAGE: ${{ env.DOCKERHUB_REPO_WEB }}:${{ env.IMAGE_TAG }}
        run: |
          set -euo pipefail
          echo "$REGISTRY_PASSWORD" | docker login "$REGISTRY_DOMAIN" -u "$REGISTRY_USERNAME" --password-stdin
          for i in 1 2 3 4 5; do
            echo "Push attempt $i for $WEB_IMAGE…"
            if docker push "$WEB_IMAGE"; then
              echo "Push succeeded for $WEB_IMAGE."
              break
            fi
            echo "Push failed; re-login & backoff…"
            docker logout "$REGISTRY_DOMAIN" || true
            echo "$REGISTRY_PASSWORD" | docker login "$REGISTRY_DOMAIN" -u "$REGISTRY_USERNAME" --password-stdin
            sleep $((i*10))
            if [ "$i" = 5 ]; then echo "Push failed after retries"; exit 1; fi
          done

      - name: Install skopeo
        run: |
          sudo apt-get update -y
          sudo apt-get install -y skopeo

      - name: Mirror WEB to Nexus on EC2 (no public 5000 needed)
        uses: appleboy/ssh-action@v1.0.3
        env:
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          DOCKERHUB_REPO_WEB: ${{ secrets.DOCKERHUB_REPO_WEB }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
          NEXUS_REPO_WEB: ${{ secrets.NEXUS_REPO_WEB }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_SSH_PORT || '22' }}
          envs: IMAGE_TAG,DOCKERHUB_REPO_WEB,DOCKERHUB_USERNAME,DOCKERHUB_TOKEN,NEXUS_USERNAME,NEXUS_PASSWORD,NEXUS_REPO_WEB
          script: |
            set -euo pipefail
            # Install skopeo if missing
            if ! command -v skopeo >/dev/null 2>&1; then
              sudo apt-get update -y
              sudo apt-get install -y skopeo
            fi

            SRC="docker://${DOCKERHUB_REPO_WEB}:${IMAGE_TAG}"
            # Talk to Nexus locally (HTTP) so no SG change required
            DST="docker://127.0.0.1:5000/${NEXUS_REPO_WEB}:${IMAGE_TAG}"

            # Copy Hub -> Nexus; disable TLS on dest because Nexus is HTTP
            skopeo copy \
              --src-creds "${DOCKERHUB_USERNAME}:${DOCKERHUB_TOKEN}" \
              --dest-creds "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" \
              --src-tls-verify=true \
              --dest-tls-verify=false \
              "${SRC}" "${DST}"

            # also tag :latest
            skopeo copy \
              --src-creds "${DOCKERHUB_USERNAME}:${DOCKERHUB_TOKEN}" \
              --dest-creds "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" \
              --src-tls-verify=true \
              --dest-tls-verify=false \
              "${SRC}" "docker://127.0.0.1:5000/${NEXUS_REPO_WEB}:latest"
  snyk-release:
    name: Snyk scan of images
    runs-on: ubuntu-latest
    needs: [setup, build-and-push-app, build-and-push-web]
    env:
      IMAGE_TAG: ${{ needs.setup.outputs.IMAGE_TAG }}
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      DOCKERHUB_REPO_APP: ${{ secrets.DOCKERHUB_REPO_APP }}
      DOCKERHUB_REPO_WEB: ${{ secrets.DOCKERHUB_REPO_WEB }}
    steps:
      - uses: actions/checkout@v4
      - uses: snyk/actions/setup@0.4.0
      - run: snyk auth "$SNYK_TOKEN"

      - name: Build .snyk from ignore list (if present)
        shell: bash
        run: |
          set -euo pipefail
          touch .snyk
          if [[ -f "security/ignores.txt" ]]; then
            grep -v '^\s*#' security/ignores.txt | sed '/^\s*$/d' | while read -r ID; do
              snyk ignore --id="$ID" --reason="approved via repo ignore list" --expiry=2099-12-31 --yes --quiet || true
            done
          fi

      - name: Scan & save JSON
        id: scan
        shell: bash
        run: |
          set +e
          set -u -o pipefail
          printf "%s\n" \
            "${DOCKERHUB_REPO_APP}:${IMAGE_TAG}" \
            "${DOCKERHUB_REPO_WEB}:${IMAGE_TAG}" > images.txt
          failures=0
          while read -r IMG; do
            [[ -z "$IMG" ]] && continue
            SAFE="$(echo "$IMG" | tr '/:@' '___')"
            OUT="snyk-${SAFE}.json"
            snyk container test "$IMG" --severity-threshold=high --json-file-output="$OUT"
            rc=$?
            if [ ! -s "$OUT" ]; then
              snyk container test "$IMG" --severity-threshold=high --json > "$OUT" 2>/dev/null || echo '{"note":"no json"}' > "$OUT"
            fi
            if [ $rc -ne 0 ]; then failures=$((failures+1)); fi
          done < images.txt
          echo "failures=$failures" >> "$GITHUB_OUTPUT"

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: snyk-reports
          path: snyk-*.json
          if-no-files-found: warn

      - name: Fail if any image failed
        if: ${{ steps.scan.outputs.failures != '0' }}
        run: |
          echo "Blocking release: Snyk found issues above threshold."
          exit 1

  deploy-ec2:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: [setup, build-and-push-app, build-and-push-web, snyk-release]
    if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') }}
    env:
      TAG: ${{ needs.setup.outputs.IMAGE_TAG }}
      # Hub
      DH_USER: ${{ secrets.DOCKERHUB_USERNAME }}
      DH_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      DH_REPO_APP: ${{ secrets.DOCKERHUB_REPO_APP }}
      DH_REPO_WEB: ${{ secrets.DOCKERHUB_REPO_WEB }}
      REGISTRY_URL: ${{ secrets.REGISTRY_URL }}
      REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      NEXUS_REPO_APP: ${{ secrets.NEXUS_REPO_APP }}
      NEXUS_REPO_WEB: ${{ secrets.NEXUS_REPO_WEB }}
      DEPLOY_REGISTRY: ${{ secrets.DEPLOY_REGISTRY }}
    steps:
      - uses: actions/checkout@v4

      - name: Ensure target dir & perms
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_SSH_PORT || '22' }}
          script: |
            set -e
            sudo mkdir -p /srv/supermario
            sudo chown -R $USER:$USER /srv/supermario

      - name: Upload compose.yml
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_SSH_PORT || '22' }}
          source: deploy/compose.yml
          target: /srv/supermario
          strip_components: 1

      - name: Upload static images
        if: ${{ hashFiles('content/images/**') != '' }}
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_SSH_PORT || '22' }}
          source: content/images/**
          target: /srv/supermario

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.0.3
        env:
          TAG: ${{ needs.setup.outputs.IMAGE_TAG }}
          # Hub creds and repos
          DH_USER: ${{ secrets.DOCKERHUB_USERNAME }}
          DH_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          DH_REPO_APP: ${{ secrets.DOCKERHUB_REPO_APP }}
          DH_REPO_WEB: ${{ secrets.DOCKERHUB_REPO_WEB }}
          # Nexus (if you ever switch DEPLOY_REGISTRY to 'nexus')
          NEXUS_DOMAIN: ${{ secrets.NEXUS_REGISTRY_DOMAIN }}
          NEXUS_USER: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASS: ${{ secrets.NEXUS_PASSWORD }}
          NEXUS_REPO_APP: ${{ secrets.NEXUS_REPO_APP }}
          NEXUS_REPO_WEB: ${{ secrets.NEXUS_REPO_WEB }}
          DEPLOY_REGISTRY: ${{ secrets.DEPLOY_REGISTRY }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_PORT: ${{ secrets.DB_PORT }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: TAG,DH_USER,DH_TOKEN,DH_REPO_APP,DH_REPO_WEB,NEXUS_DOMAIN,NEXUS_USER,NEXUS_PASS,NEXUS_REPO_APP,NEXUS_REPO_WEB,DEPLOY_REGISTRY,DB_NAME,DB_USER,DB_PASSWORD,DB_PORT
          script: |
            set -eo pipefail
            sudo mkdir -p /srv/supermario/content/images
            cd /srv/supermario

            # Guard against empty tag
            if [ -z "${TAG:-}" ]; then
              echo "ERROR: TAG is empty. Refuse to deploy." >&2
              exit 1
            fi

            REG="${DEPLOY_REGISTRY:-hub}"
            if [ "$REG" = "nexus" ]; then
              # Talk to Nexus over localhost HTTP (no public 5000, no TLS)
              NEXUS_LOCAL="127.0.0.1:5000"
              echo "${NEXUS_PASS}" | sudo docker login "${NEXUS_LOCAL}" -u "${NEXUS_USER}" --password-stdin
              IMAGE_REPO_APP="${NEXUS_LOCAL}/${NEXUS_REPO_APP}"
              IMAGE_REPO_WEB="${NEXUS_LOCAL}/${NEXUS_REPO_WEB}"
            else
              echo "${DH_TOKEN}" | sudo docker login -u "${DH_USER}" --password-stdin
              IMAGE_REPO_APP="${DH_REPO_APP}"
              IMAGE_REPO_WEB="${DH_REPO_WEB}"
            fi
            
            # Write or update .env for compose (app, web, db)
            {
              echo "IMAGE_REPO_APP=${IMAGE_REPO_APP}"
              echo "IMAGE_REPO_WEB=${IMAGE_REPO_WEB}"
              echo "TAG=${TAG}"
              echo "DB_NAME=${DB_NAME}"
              echo "DB_USER=${DB_USER}"
              echo "DB_PASSWORD=${DB_PASSWORD}"
              echo "DB_PORT=${DB_PORT:-5432}"
            } | sudo tee .env >/dev/null

            echo "Pulling ${IMAGE_REPO_APP}:${TAG} and ${IMAGE_REPO_WEB}:${TAG}…"
            sudo docker pull "${IMAGE_REPO_APP}:${TAG}"
            sudo docker pull "${IMAGE_REPO_WEB}:${TAG}"

            # Deploy (now also brings up Postgres)
            sudo docker compose -f compose.yml pull
            sudo docker compose -f compose.yml up -d --no-build
            sudo docker image prune -f
